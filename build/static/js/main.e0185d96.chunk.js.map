{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","state","move","squares","Array","fill","squaresHistory","xIsNext","i","this","slice","calculateWinner","setState","onToggleX","extraClass","handleClick","status","winner","renderSquare","data-tip","disabled","handleUndo","icon","faUndo","size","place","type","effect","handleRedo","faRedo","handleNewGame","faFile","React","Component","lines","length","a","b","c","Game","x","classes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0185d96.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactTooltip from 'react-tooltip';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFile, faUndo, faRedo } from '@fortawesome/free-solid-svg-icons';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            move: 0,\n            squares: Array(9).fill(null),\n            squaresHistory: Array(9).fill(null),\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        const squaresHistory = this.state.squaresHistory.slice();\n\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n\n        let x = 'X';\n        let o = 'O';\n\n        let move = this.state.move;\n        squaresHistory[move] = this.state.squares;\n        move++;\n        squares[i] = this.state.xIsNext ? x : o;\n\n        this.setState({\n            move: move,\n            squares: squares,\n            squaresHistory: squaresHistory,\n            xIsNext: !this.state.xIsNext,\n        });\n\n        this.props.onToggleX(this.state.xIsNext);\n    }\n\n    handleUndo() {\n        let move = this.state.move;\n\n        const squaresHistory = this.state.squaresHistory.slice();\n        squaresHistory[move] = this.state.squares;\n\n        --move;\n        this.setState({\n            move: move,\n            squares: this.state.squaresHistory[move],\n            squaresHistory: squaresHistory,\n            xIsNext: !this.state.xIsNext,\n        });\n\n        this.props.onToggleX(this.state.xIsNext);\n    }\n\n    handleRedo() {\n        let move = this.state.move;\n        move++;\n        this.setState({\n            move: move,\n            squares: this.state.squaresHistory[move],\n            xIsNext: !this.state.xIsNext,\n        });\n\n        this.props.onToggleX(this.state.xIsNext);\n    }\n\n    handleNewGame() {\n        this.setState({\n            move: 0,\n            squares: Array(9).fill(null),\n            squaresHistory: Array(9).fill(null),\n            xIsNext: true,\n        });\n\n        this.props.onToggleX(this.state.xIsNext);\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                extraClass={this.state.xIsNext ? 'revert' : ''}\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                <div className=\"icons\">\n                    <button\n                        data-tip=\"Undo\"\n                        className=\"function-button\"\n                        disabled={this.state.move === 0}\n                        onClick={() => this.handleUndo()}>\n                        <FontAwesomeIcon icon={faUndo} size=\"4x\" />\n                    </button>\n                    <ReactTooltip place=\"bottom\" type=\"info\" effect=\"float\" />\n                    <button\n                        data-tip=\"Redo\"\n                        className=\"function-button\"\n                        disabled={this.state.squaresHistory[this.state.move + 1] === null}\n                        onClick={() => this.handleRedo()}>\n                        <FontAwesomeIcon icon={faRedo} size=\"4x\" />\n                    </button>\n                    <ReactTooltip place=\"bottom\" type=\"info\" effect=\"float\" />\n                    <button\n                        data-tip=\"New Game\"\n                        className=\"function-button\"\n                        onClick={() => this.handleNewGame()}>\n                        <FontAwesomeIcon icon={faFile} size=\"4x\" />\n                    </button>\n                    <ReactTooltip place=\"bottom\" type=\"warning\" effect=\"float\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classes: 'game',\n        };\n    }\n\n    onToggleX = x => {\n        this.setState({\n            classes: x ? 'revert game' : 'game',\n        });\n    };\n    render() {\n        return (\n            <div className={this.state.classes}>\n                <div className=\"game-board\">\n                    <Board onToggleX={this.onToggleX} />\n                </div>\n            </div>\n        );\n    }\n}\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}